<feed xmlns="http://www.w3.org/2005/Atom"> <id>/</id><title>one step at a time</title><subtitle>A minimal, responsive and feature-rich Jekyll theme for technical writing.</subtitle> <updated>2025-08-20T15:55:17+08:00</updated> <author> <name>fuqiang wang</name> <uri>/</uri> </author><link rel="self" type="application/atom+xml" href="/feed.xml"/><link rel="alternate" type="text/html" hreflang="en" href="/"/> <generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator> <rights> © 2025 fuqiang wang </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>Smmu Operation</title><link href="/posts/smmu-operation/" rel="alternate" type="text/html" title="Smmu Operation" /><published>2025-08-15T00:00:00+08:00</published> <updated>2025-08-15T00:00:00+08:00</updated> <id>/posts/smmu-operation/</id> <content src="/posts/smmu-operation/" /> <author> <name>fuqiang wang</name> </author> <summary>3.1 Software interface The SMMU has three interfaces that software uses: Memory-based data structures to map devices to translation tables which are used to translate client device addresses. Memory-based circular buffer queues. These are a Command queue for commands to the SMMU, an Event queue for event/fault reports from the SMMU, and a PRI queue for receipt of PCIe page r...</summary> </entry> <entry><title>[arm] gic</title><link href="/posts/learn_the_architecture_gicv3v4/" rel="alternate" type="text/html" title="[arm] gic" /><published>2025-08-13T20:39:00+08:00</published> <updated>2025-08-13T20:39:00+08:00</updated> <id>/posts/learn_the_architecture_gicv3v4/</id> <content src="/posts/learn_the_architecture_gicv3v4/" /> <author> <name>fuqiang</name> </author> <category term="arm_arch" /> <category term="gic" /> <summary>Configuring the Arm GIC This section of the guide describes how to enable and configure a GICv3-compliant interrupt controller in a bare metal environment. For detailed register descriptions see the Arm Generic Interrupt Controller Architecture Specification GIC architecture version 3.0 and 4. 本节指南介绍了如何在裸机环境下启用并配置符合 GICv3 标准的中断控制器。有关寄存 器的详细描述，请参阅《Arm 通用中断控制器架构规范（GIC 架构版本 3.0 和 4）》。 接下来我们...</summary> </entry> <entry><title>[arm] TrustZone</title><link href="/posts/learn_the_architecture__trustzone/" rel="alternate" type="text/html" title="[arm] TrustZone" /><published>2025-08-13T09:39:00+08:00</published> <updated>2025-08-13T09:39:00+08:00</updated> <id>/posts/learn_the_architecture__trustzone/</id> <content src="/posts/learn_the_architecture__trustzone/" /> <author> <name>fuqiang</name> </author> <category term="coco" /> <category term="trustzone" /> <summary>What is TrustZone? TrustZone is the name of the Security architecture in the Arm A-profile architecture. First introduced in Armv6K, TrustZone is also supported in Armv7-A and Armv8-A. TrustZone provides two execution environments with system-wide hardware enforced isolation between them, as shown in this diagram: TrustZone 是 Arm A-profile 架构中的安全架构名称。TrustZone 首次在 Armv6K 中引 入，并且在 Armv7-A 和...</summary> </entry> <entry><title>virtio notify</title><link href="/posts/virtio-notify/" rel="alternate" type="text/html" title="virtio notify" /><published>2025-06-09T18:10:00+08:00</published> <updated>2025-06-09T18:10:00+08:00</updated> <id>/posts/virtio-notify/</id> <content src="/posts/virtio-notify/" /> <author> <name>fuqiang</name> </author> <category term="virt" /> <category term="io_virt" /> <summary>virtio feature : VIRTIO_RING_F_EVENT_IDX 我们这里抽象下，先定义一个producer, consumer的模型, 将 event_idx定义为head，将vring.idx定义为tail, 即 consumer modify head producer modify tail(和vring.idx一样，表示producer下次要存储数据的位置) 整个逻辑如下: consumer: while have_notify(): while head &amp;amp;lt; tail: handle data ring[head] head++ STORE head producer: while get_put_data() as data: put data into ring[tail] t1 = ge...</summary> </entry> <entry><title>一文搞懵IO虚拟化之 -- virtio</title><link href="/posts/virtio/" rel="alternate" type="text/html" title="一文搞懵IO虚拟化之 -- virtio" /><published>2025-06-05T09:21:00+08:00</published> <updated>2025-06-05T09:21:00+08:00</updated> <id>/posts/virtio/</id> <content src="/posts/virtio/" /> <author> <name>fuqiang</name> </author> <category term="virt" /> <category term="io_virt" /> <summary>overflow virtio: ABSTRACTION API virtio-vring virtqueue ops vring vring struct vring notify sample of handle VirtIO why virtio is so efficient overflow virtio 起源于 2008 年的 virtio: Towards a De-Facto Standard For Virtual I/O Devices该论 文1,2, 而其诞生的背景是, Linux 内核作为guest支持高达8种虚拟化系统: Xen KVM VMware 的 VMI IB...</summary> </entry> </feed>
