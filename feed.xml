<feed xmlns="http://www.w3.org/2005/Atom"> <id>/</id><title>one step at a time</title><subtitle>A minimal, responsive and feature-rich Jekyll theme for technical writing.</subtitle> <updated>2025-04-09T23:02:39+08:00</updated> <author> <name>fuqiang wang</name> <uri>/</uri> </author><link rel="self" type="application/atom+xml" href="/feed.xml"/><link rel="alternate" type="text/html" hreflang="en" href="/"/> <generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator> <rights> © 2025 fuqiang wang </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>[perftest] lat mem rd</title><link href="/posts/lat-mem-bench/" rel="alternate" type="text/html" title="[perftest] lat mem rd" /><published>2025-04-09T11:50:00+08:00</published> <updated>2025-04-09T11:50:00+08:00</updated> <id>/posts/lat-mem-bench/</id> <content src="/posts/lat-mem-bench/" /> <author> <name>fuqiang</name> </author> <category term="perftest" /> <summary>使用方法 整体命令: [-P &amp;amp;lt;parallelism&amp;amp;gt;] [-W &amp;amp;lt;warmup&amp;amp;gt;] [-N &amp;amp;lt;repetitions&amp;amp;gt;] [-t] len [stride...] 参数解释: P: 并行运行线程数 t: 是否连续访问 W: warmup N: repetitions len: 访问数据块最大大小(该程序会循环测试，从较小的数据块开始测试，逐步 增加数据块大小，最高达到len大小) stride: 访问步长, 可以指定多个步长依次测试 命令示例: numactl -C 0 -m 0 ./bin/x86_64-linux-gnu/lat_mem_rd -P 1 -N 5 -t 1024m 512 1024 解释: numactl: -C 0: 将进程绑定在cpu ...</summary> </entry> <entry><title>ats</title><link href="/posts/ats/" rel="alternate" type="text/html" title="ats" /><published>2025-03-31T11:00:00+08:00</published> <updated>2025-03-31T11:00:00+08:00</updated> <id>/posts/ats/</id> <content src="/posts/ats/" /> <author> <name>fuqiang</name> </author> <category term="pcie" /> <category term="acs" /> <summary>ATS Specification 10.1 ATS Architectural Overview Most contemporary system architectures make provisions for translating addresses from DMA (bus mastering) I/O Functions. In many implementations, it has been common practice to assume that the physical address space seen by the CPU and by an I/O Function is equivalent. While in others, this is not the case. The address programmed into an I/O F...</summary> </entry> <entry><title>CHAPTER 2 Coherence Basics</title><link href="/posts/coherence_basic/" rel="alternate" type="text/html" title="CHAPTER 2 Coherence Basics" /><published>2025-03-29T14:50:00+08:00</published> <updated>2025-03-29T14:50:00+08:00</updated> <id>/posts/coherence_basic/</id> <content src="/posts/coherence_basic/" /> <author> <name>fuqiang</name> </author> <category term="cache" /> <summary>In this chapter, we introduce enough about cache coherence to understand how consistency models interact with caches. We start in Section 2.1 by presenting the system model that we consider throughout this primer. To simplify the exposition in this chapter and the follow- ing chapters, we select the simplest possible system model that is sufficient for illustrating the important issues; we defe...</summary> </entry> <entry><title>CHAPTER 1 Introduction to Consistency and Coherence</title><link href="/posts/consistency_and_coherence/" rel="alternate" type="text/html" title="CHAPTER 1 Introduction to Consistency and Coherence" /><published>2025-03-29T10:42:00+08:00</published> <updated>2025-03-29T10:42:00+08:00</updated> <id>/posts/consistency_and_coherence/</id> <content src="/posts/consistency_and_coherence/" /> <author> <name>fuqiang</name> </author> <category term="cache" /> <summary>1.2 COHERENCE (A.K.A., CACHE COHERENCE) Unless care is taken, a coherence problem can arise if multiple actors (e.g., multiple cores) have access to multiple copies of a datum (e.g., in multiple caches) and at least one access is a write. Consider an example that is similar to the memory consistency example. A student checks the online schedule of courses, observes that the Computer Architectu...</summary> </entry> <entry><title>Memory Consistency Motivation And Sequential Consistency</title><link href="/posts/memory-consistency-motivation-and-sequential-consistency/" rel="alternate" type="text/html" title="Memory Consistency Motivation And Sequential Consistency" /><published>2025-03-29T00:00:00+08:00</published> <updated>2025-03-29T00:00:00+08:00</updated> <id>/posts/memory-consistency-motivation-and-sequential-consistency/</id> <content src="/posts/memory-consistency-motivation-and-sequential-consistency/" /> <author> <name>fuqiang wang</name> </author> <summary>This chapter delves into memory consistency models (a.k.a. memory models) that define the behavior of shared memory systems for programmers and implementors. These models define correctness so that programmers know what to expect and implementors know what to provide. We first motivate the need to define memory behavior (Section 3.1), say what a memory con- sistency model should do (Section 3.2...</summary> </entry> </feed>
