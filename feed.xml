<feed xmlns="http://www.w3.org/2005/Atom"> <id>/</id><title>one step at a time</title><subtitle>A minimal, responsive and feature-rich Jekyll theme for technical writing.</subtitle> <updated>2025-03-29T16:52:16+08:00</updated> <author> <name>fuqiang wang</name> <uri>/</uri> </author><link rel="self" type="application/atom+xml" href="/feed.xml"/><link rel="alternate" type="text/html" hreflang="en" href="/"/> <generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator> <rights> © 2025 fuqiang wang </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>CHAPTER 2 Coherence Basics</title><link href="/posts/coherence_basic/" rel="alternate" type="text/html" title="CHAPTER 2 Coherence Basics" /><published>2025-03-29T14:50:00+08:00</published> <updated>2025-03-29T14:50:00+08:00</updated> <id>/posts/coherence_basic/</id> <content src="/posts/coherence_basic/" /> <author> <name>fuqiang</name> </author> <category term="cache" /> <summary>In this chapter, we introduce enough about cache coherence to understand how consistency models interact with caches. We start in Section 2.1 by presenting the system model that we consider throughout this primer. To simplify the exposition in this chapter and the follow- ing chapters, we select the simplest possible system model that is sufficient for illustrating the important issues; we defe...</summary> </entry> <entry><title>CHAPTER 1 Introduction to Consistency and Coherence</title><link href="/posts/consistency_and_coherence/" rel="alternate" type="text/html" title="CHAPTER 1 Introduction to Consistency and Coherence" /><published>2025-03-29T10:42:00+08:00</published> <updated>2025-03-29T10:42:00+08:00</updated> <id>/posts/consistency_and_coherence/</id> <content src="/posts/consistency_and_coherence/" /> <author> <name>fuqiang</name> </author> <category term="cache" /> <summary>1.2 COHERENCE (A.K.A., CACHE COHERENCE) Unless care is taken, a coherence problem can arise if multiple actors (e.g., multiple cores) have access to multiple copies of a datum (e.g., in multiple caches) and at least one access is a write. Consider an example that is similar to the memory consistency example. A student checks the online schedule of courses, observes that the Computer Architectu...</summary> </entry> <entry><title>Memory Consistency Motivation And Sequential Consistency</title><link href="/posts/memory-consistency-motivation-and-sequential-consistency/" rel="alternate" type="text/html" title="Memory Consistency Motivation And Sequential Consistency" /><published>2025-03-29T00:00:00+08:00</published> <updated>2025-03-29T00:00:00+08:00</updated> <id>/posts/memory-consistency-motivation-and-sequential-consistency/</id> <content src="/posts/memory-consistency-motivation-and-sequential-consistency/" /> <author> <name>fuqiang wang</name> </author> <summary>This chapter delves into memory consistency models (a.k.a. memory models) that define the behavior of shared memory systems for programmers and implementors. These models define correctness so that programmers know what to expect and implementors know what to provide. We first motivate the need to define memory behavior (Section 3.1), say what a memory con- sistency model should do (Section 3.2...</summary> </entry> <entry><title>svm</title><link href="/posts/svm-overflow/" rel="alternate" type="text/html" title="svm" /><published>2025-03-03T13:30:00+08:00</published> <updated>2025-03-03T13:30:00+08:00</updated> <id>/posts/svm-overflow/</id> <content src="/posts/svm-overflow/" /> <author> <name>fuqiang</name> </author> <category term="amd_spec" /> <category term="svm" /> <summary>文章主要来自AMD sdm `15 Secure Virtual Machine overflow SVM 提供了由硬件扩展，旨在实现高效, 经济的虚拟机系统。其功能主要分为 virtualization support 和 security support, 概述如下: virtualization support memory guest/host tagged TLB External (DMA) access protection for memory Nested paging support interrupt virtualization Intercepting physic...</summary> </entry> <entry><title>sev</title><link href="/posts/amd-sev/" rel="alternate" type="text/html" title="sev" /><published>2025-02-28T09:39:00+08:00</published> <updated>2025-02-28T09:39:00+08:00</updated> <id>/posts/amd-sev/</id> <content src="/posts/amd-sev/" /> <author> <name>fuqiang</name> </author> <category term="coco" /> <category term="sev" /> <summary>本文是对1的高仿，但是劣质版本，非常建议去阅读下huangyong的文章 背景 在云环境中有两类角色: platform owner : 云厂商 guest owner : 租用云厂商的用户 云厂商负责提供云基础设施, 为用户构建出一套”属于自己的” 计算存储网络， 同时需要保证云基础设施足够优质来吸引用户。 而租户则是使用云厂商提供的云基础设施，来跑自己的业务，在云场景下， 租户只需要关心云环境中的业务，而无需关心云基础设施的层面的问题， 例如: 云主机的网络波动，硬件老化等等。 而云环境下的安全也是platform owner的一个重要服务，而，只能选择信任 云厂商提供的安全防护功能。但是, 总有防不住的时候，一旦platform owner的 的防线被击穿，其上面运行的guest都会有风险，而由于host有足够的权限，并且 其操作对于guest而言都是...</summary> </entry> </feed>
