<feed xmlns="http://www.w3.org/2005/Atom"> <id>/</id><title>one step at a time</title><subtitle>A minimal, responsive and feature-rich Jekyll theme for technical writing.</subtitle> <updated>2025-09-03T16:34:02+08:00</updated> <author> <name>fuqiang wang</name> <uri>/</uri> </author><link rel="self" type="application/atom+xml" href="/feed.xml"/><link rel="alternate" type="text/html" hreflang="en" href="/"/> <generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator> <rights> © 2025 fuqiang wang </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>[arm] RMM</title><link href="/posts/RMM/" rel="alternate" type="text/html" title="[arm] RMM" /><published>2025-09-03T15:31:00+08:00</published> <updated>2025-09-03T15:31:00+08:00</updated> <id>/posts/RMM/</id> <content src="/posts/RMM/" /> <author> <name>fuqiang</name> </author> <category term="coco" /> <category term="RMM" /> <summary>overflow RMM 是一个系统软件（固件）器和 RME (hardware extension) 一起构成实现了 ARM Confidential Compute Architecture(CCA) 用来提供受保护的可执行环境 Realms. Confidential Computing Armv8-A 通过建立了如下图的权限层次结构: 该层次结构的逻辑是，让高权限等级去管理权限异常等级使用的资源，并且资源管理和访问 权限是绑定在一起的。 举个例子: EL2&amp;amp;amp;1 中 EL2 用来分配为EL1分配物理页，在 EL1&amp;amp;amp;0 中EL1为EL0分配虚拟机认为 的物理页。并且低权限等级不能访问高权限等级的资源: guest user space(el0) 不能访问 guest kernel (el1)的内存，guest kernel (el1) 不能访问hos...</summary> </entry> <entry><title>schedule: overflow</title><link href="/posts/sched/" rel="alternate" type="text/html" title="schedule: overflow" /><published>2025-09-02T22:00:00+08:00</published> <updated>2025-09-02T22:00:00+08:00</updated> <id>/posts/sched/</id> <content src="/posts/sched/" /> <author> <name>fuqiang</name> </author> <category term="schedule" /> <summary>调度子系统的任务: 调度程序负责决定运行哪个程序，该程序运行多长时间。 调度系统的责任很明确, 需要在不富裕的CPU上，合理的运行所有程序。目前的cpu架构决定, 在一个core上, 同一时间只能有一个task运行, 所以调度子系统会决定当前cpu运行某个进 程，并且让其他进程等待, 在合适的时机，将cpu上的进程调出，运行下一个合适的进程， 依次循环。 所以调度系统是建立在多任务的基础上构建, 我们可以设想下, 如果将来某一天，体系架构 从根本上变了, – CPU &amp;amp;gt;&amp;amp;gt; task number, Linus本人可能要执行rm -rf kernel/sched。 schedule system type 而这种多任务的调度系统分为两类: 非抢占式 抢占式 非抢占式是指在前一个任务未主动退出之前，调度子系统不会将另一个该任务踢出，运行另 一个任...</summary> </entry> <entry><title>How To study Linux kernel and become a committer</title><link href="/posts/HOWTO-study-Linux-kernel/" rel="alternate" type="text/html" title="How To study Linux kernel and become a committer" /><published>2025-09-02T20:00:00+08:00</published> <updated>2025-09-02T20:00:00+08:00</updated> <id>/posts/HOWTO-study-Linux-kernel/</id> <content src="/posts/HOWTO-study-Linux-kernel/" /> <author> <name>fuqiang</name> </author> <category term="learn method" /> <summary>前言 学习Linux内核究竟是为了什么 ? 从事内核开发者的人员相对较少, 方便找一份稳定的工作 ? 兴趣使然，对操作系统感兴趣，想走读些内核源码 ? 用户态性能分析自顶向下的需要 ? 对于我个人来说，更倾向于1,2两点, 自己也从事Linux 内核,虚拟化一些年头了，但是 对知识的掌握毫无体系可言，自己也在纠结如何学习 Linux内核。之前的学习方法往往是从 BUG 定位中，掌握一些细节，然后在扩展相关的一小部分代码。 这样的方法, 对解决BUG 没有什么问题。因为BUG定位，尤其是panic, softlockup/hardlockup, use-after-free, 内存踩踏. 以及一些其他的不难的BUG 没有什么问题，因为这些问题的定位不会要求对整个的子系统有一个成体系的了解，而是往 往要求对debug工具的熟练使用，以及对BUG触发点上那一点代码的...</summary> </entry> <entry><title>[arm] learn CCA</title><link href="/posts/learn-CCA/" rel="alternate" type="text/html" title="[arm] learn CCA" /><published>2025-09-02T16:00:00+08:00</published> <updated>2025-09-02T16:00:00+08:00</updated> <id>/posts/learn-CCA/</id> <content src="/posts/learn-CCA/" /> <author> <name>fuqiang</name> </author> <category term="coco" /> <category term="CCA" /> <summary>1. Overview This guide describes: The role of confidential computing in modern compute platforms The principles of confidential computing. How the Arm Confidential Compute Architecture (Arm CCA) enables confidential computing in an Arm compute platform. 本指南介绍了： 机密计算在现代计算平台中的作用 机密计算的基本原理 Arm 机密计算架构（Arm CCA）如何在 Arm 计算平台上实现机密计算 After reading this guide, you will b...</summary> </entry> <entry><title>[arm] learn RME</title><link href="/posts/learn-RME/" rel="alternate" type="text/html" title="[arm] learn RME" /><published>2025-08-26T14:55:00+08:00</published> <updated>2025-08-26T14:55:00+08:00</updated> <id>/posts/learn-RME/</id> <content src="/posts/learn-RME/" /> <author> <name>fuqiang</name> </author> <category term="coco" /> <category term="RME" /> <summary>1. Overview This guide introduces the Realm Management Extension (RME), an extension to the architecture. RME is the hardware component of the Arm Confidential Compute Architecture (Arm CCA) which also includes software elements. RME dynamically transfers resources and memory to a new protected address space that higher privileged software or TrustZone firmware cannot access. Because of this a...</summary> </entry> </feed>
